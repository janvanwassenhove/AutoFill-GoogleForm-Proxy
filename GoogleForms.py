# Autofill Google Form using autogenerated email address, optionally cycling through different proxies

import requests
import datetime
import time
import sys
import random
import string
import logging
import argparse

# URL to the Google Form you want to fill, replace xyz with your forms key, /formResponse should be used instead of /viewform
url = 'https://docs.google.com/forms/d/e/xyz/formResponse'
urlProxies = 'https://api.proxyscrape.com/v2/'

parser = argparse.ArgumentParser()
parser.add_argument('--viaProxy', type=bool, default=False)
parser.add_argument('--numberOfRequests', type=int, default=2)
parser.add_argument('--scrambled', type=bool, default=False)
args = parser.parse_args()

def get_values():
    """
        It returns a list of different form data to be submitted by send_attendance method.
        value_list is a list of values to be filled in the form.
    """

    values_list = []

    for i in range(0, args.numberOfRequests):
        '''keys are the value of 'name' element of the '''
        values = {
            # Email Address
            "emailAddress": generate_email(),
            # Form entry
            "entry.1489552739": "text input",
            # sentinel
            "entry.1489552739_sentinel": "",
        }

        values_list.append(values)
    return values_list

def generate_email():
    # List available domain names
    domains = ["outlook.com", "yahoo.com", "cloudbreakers.com", "msn.com", "aol.com", "icloud.com", "gmx.com", "zoho.com", "gmail.com"]
    # Choose random domain from list
    domain = random.choice(domains)

    if args.scrambled: # scrambled characters usersname
        # Listing possible characteres username
        letters = string.ascii_lowercase
        # Generating random username of 10 characters length
        username = ''.join(random.choice(letters) for i in range(10))
    else : # more humanoid username
        # List of adjectives and nouns to choose from
        adjectives = ['vt', 'turn', 'funny', 'serious', 'smart', 'holy', 'knap', 'XY', 'lol', 'fyi']
        nouns = ['frank', 'zita', 'turan', 'morgan', 'lion', 'tiger', 'lokaal','cedric','nelly', 'tom', 'tim', 'tessa', 'bert', 'sim']
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)

        # Generate a random username by combining two words
        username = random.choice(adjectives) + random.choice(nouns) + str(num1) + str(num2)

    # Combination of username & domain to get a complete e-mailadres
    email = username + "@" + domain
    return email

def proxy_request(url, **kwargs):

    params = {'request': 'displayproxies', 'protocol': 'http', 'timeout': '10000', 'country': 'all', 'ssl': 'all', 'anonymity': 'all'}
    response = requests.get(urlProxies, params=params)

    # Retrieve response and store proxy list
    ip_addresses_raw = response.text.split('\r\n')
    # print("RAW :", ip_addresses_raw)

    ip_addresses = []
    ip_ports = []
    for proxy in ip_addresses_raw:
        if ':' in proxy:
            ip, port = proxy.split(':')
            ip_addresses.append((ip, int(port)))
            ip_ports = [f"{ip}:{port}" for ip, port in ip_addresses]
    # ip_addresses = [(proxy.split(':')[0], int(proxy.split(':')[1])) for proxy in ip_addresses_raw]

    while True:
      try:
        random_index = random.randrange(len(ip_ports))
        random_ip_port = ip_ports[random_index]
        proxies = {"http": random_ip_port, "https": random_ip_port}
        print("Attempt using proxy", proxies)

        response = requests.post(url, proxies=proxies, timeout=5, **kwargs)

        print("Form Got Submitted.", response.request.body)
        print("Proxy That Was Used: {proxy['https']}", proxies)
        break
      except Exception as e:
         print("Error, looking for another proxy", proxy, e)
    return response

def send_attendance(url, data):
    """It takes google form url which is to be submitted and also data which is a list of data to be submitted in the form iteratively."""

    for d in data:
        try:

            if args.viaProxy:
                proxy_request(url, data=d)
            else:
                response = requests.post(url, data=d)
                print("Form Submitted.", response.request.body)

            time.sleep(15)
        except Exception as e:
            logging.exception(e)
            print("Error Occured!")

final_data = get_values()

send_attendance(url, final_data)
